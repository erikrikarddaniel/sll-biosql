#!/usr/bin/env ruby
#
# = NAME
#
# dirlist2format
#
# = SYNOPSIS
#
# See below, in opt parser block.
#
# = USAGE
#
# See below, in opt parser block.
#
# = AUTHOR
#
# daniel.lundin@scilifelab.se

$VERBOSE = true

require 'amatch'
require 'optparse'

include Amatch

FORMATS = {
  'url_taxonname' => { 
    'call' => :url_taxonnamecall, 
    'desc' => 'Format description' ,
    'mandopts' => [ ]
  },
}
DEFAULT_FORMAT = 'url_taxonname'

def formats(format = false)
  if format and FORMATS[format]
    "#{format}: #{FORMATS[format]['desc']}\n"
  elsif format and format != ''
    "Format #{format} not supported\n"
  else
    "Supported formats:\n\t" + FORMATS.keys.sort.map { |f| "#{f}#{ f == DEFAULT_FORMAT ? ' * default *' : ''}" }.join("\n\t") + "\n"
  end
end

@options = {
  :delete_until => 'ftp.ncbi.nih.gov',
  :format => DEFAULT_FORMAT
}
opt_parser = OptionParser.new do |opts|
  opts.banner = <<BANNER
dirlist2format: Reads a recursive directory listing containing files with approximate organism names (typically an NCBI ftp site directory tree), and outputs a formated list to stdout.
  dirlist2format [options] file0..filen
BANNER

  opts.on "--delete_until=STRING", "Delete everything from path until this string is encountered, default '#{@options[:delete_until]}'" do |v|
    @options[:delete_until] = v
  end

  opts.on "--format=format", "Output format, default #{DEFAULT_FORMAT}"  do |v| 
    @options[:format] = v 
  end

  opts.on "--formats[=v]", "Lists available output formats or, with a format as parameter, writes a description of a format"  do |v|
    puts formats v 
    exit 0
  end

  opts.on "-h", "--help", "This info"  do 
    puts opts
    exit 0
  end

  opts.on "--taxmap=FILE", "File containing a tab separated list of NCBI taxon ids and taxon names" do |v|
    @options[:taxmap] = v
  end

  opts.on "-v", "--verbose", "Be verbose"  do |v| 
    @options[:verbose] = v 
  end
end
begin
  opt_parser.parse!
  mandatory = FORMATS[@options[:format]]['mandopts'] + [ :taxmap ]	# Fill in with mandatory option names (i.e. starting with :)
  missing = mandatory.select { |param| @options[param].nil? }
  unless missing.empty?
    warn "Missing options: #{missing.map { |m| "--#{m}" }.join(", ")}"
    warn opt_parser
    exit 1
  end
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
  warn "#{$!}"
  warn opt_parser
  exit 1
end

def url_taxonnamecall()
  @results.each do |r|
    puts "#{r[:ncbi_taxon_id]}\t#{r[:path]}"
  end
end

# Tries to find the name in the @taxmap, using amatch fuzzy searching if necessary
def _lookup(name)
  return name if @taxmap[name]
  warn "Didn't find #{name} in taxmap -- searching for it using fuzzy matching" if @options[:verbose]
  lname = Levenshtein.new(name)
  n = @taxmap.keys.sort_by { |t| lname.match(t) }
  warn "Returning #{n[0]} for #{name}" if @options[:verbose]
  n[0]
end

unless FORMATS.keys.find { |f| f == @options[:format] }
  warn "Format #{@options[:format]} unsupported"
  warn formats
  exit 1
end

@taxmap = { }
begin
  File.open(@options[:taxmap]).each do |line|
    line.chomp!
    fields = line.split("\t")
    warn "#{__LINE__}: fields: #{fields}"
    @taxmap[fields[0]] = fields[1]
  end
rescue
  warn "Failed to read taxmap file (#{@options[:taxmap]}): #{$!}, backtrace:\n\t#{$!.backtrace.join("\n\t")}"
  exit 2
end

# Loop over infiles
@results = []
begin
  file = nil
  ARGV.each do |file|
    if file == '-'
      warn "Parsing STDIN" if @options[:verbose]
      io = STDIN
    else
      warn "Parsing #{file}" if @options[:verbose]
      if file =~ /.gz$/
	io = IO.popen("gunzip -c #{file}", "r")
      elsif file =~ /.bz2$/
	io = IO.popen("bunzip2 -c #{file}", "r")
      else
	io = File.new(file)
      end
    end
    name = nil
    path = nil
    io.each do |line|
      line.chomp!
      if line =~ /(^\/.*\/(.*)_uid\d+):$/
	name = $2
	path = "#{$1}/"
	name.gsub!(/_/, ' ')
	name = _lookup(name)
	path.sub!(/.*(#{@options[:delete_until]})/, @options[:delete_until])
      elsif line =~ /^-.*\s(\S+\.f[an]a(\.gz)?)/
	file = $1
	@results << { name: name, ncbi_taxon_id: @taxmap[name], path: path + file }
      end
    end
  end
rescue
  warn "Failed to process file '#{file}': #{$!}, backtrace:\n\t#{$!.backtrace.join("\n\t")}"
end

# Print out the results
self.method(FORMATS[@options[:format]]['call']).call()
